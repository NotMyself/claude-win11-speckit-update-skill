name: Quality Checks

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'scripts/**/*.ps1'
      - 'scripts/**/*.psm1'
      - 'tests/**/*.ps1'
      - 'PSScriptAnalyzerSettings.psd1'
      - '.github/workflows/quality-checks.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'scripts/**/*.ps1'
      - 'scripts/**/*.psm1'
      - 'tests/**/*.ps1'
      - 'PSScriptAnalyzerSettings.psd1'
      - '.github/workflows/quality-checks.yml'

jobs:
  lint:
    name: PSScriptAnalyzer Linting
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Write-Host "Installing PSScriptAnalyzer..." -ForegroundColor Cyan
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck
          Write-Host "Installed version: $(Get-Module PSScriptAnalyzer -ListAvailable | Select-Object -ExpandProperty Version)" -ForegroundColor Green

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          Write-Host "`n=== Running PSScriptAnalyzer ===" -ForegroundColor Cyan

          # Analyze all PowerShell files
          $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSScriptAnalyzerSettings.psd1

          if ($results) {
              Write-Host "`n‚ùå PSScriptAnalyzer found $($results.Count) issue(s):" -ForegroundColor Red

              # Group by severity
              $errors = $results | Where-Object { $_.Severity -eq 'Error' }
              $warnings = $results | Where-Object { $_.Severity -eq 'Warning' }
              $info = $results | Where-Object { $_.Severity -eq 'Information' }

              if ($errors) {
                  Write-Host "`nüî¥ Errors ($($errors.Count)):" -ForegroundColor Red
                  foreach ($error in $errors) {
                      Write-Host "   $($error.ScriptName):$($error.Line) - $($error.RuleName)" -ForegroundColor Red
                      Write-Host "      $($error.Message)" -ForegroundColor Yellow
                  }
              }

              if ($warnings) {
                  Write-Host "`n‚ö†Ô∏è  Warnings ($($warnings.Count)):" -ForegroundColor Yellow
                  foreach ($warning in $warnings) {
                      Write-Host "   $($warning.ScriptName):$($warning.Line) - $($warning.RuleName)" -ForegroundColor Yellow
                      Write-Host "      $($warning.Message)" -ForegroundColor Gray
                  }
              }

              if ($info) {
                  Write-Host "`n‚ÑπÔ∏è  Information ($($info.Count)):" -ForegroundColor Cyan
                  foreach ($item in $info) {
                      Write-Host "   $($item.ScriptName):$($item.Line) - $($item.RuleName)" -ForegroundColor Cyan
                  }
              }

              # Fail if there are errors
              if ($errors) {
                  Write-Host "`n‚ùå PSScriptAnalyzer failed with $($errors.Count) error(s)" -ForegroundColor Red
                  exit 1
              } else {
                  Write-Host "`n‚ö†Ô∏è  PSScriptAnalyzer found warnings but no errors" -ForegroundColor Yellow
                  Write-Host "   Consider fixing warnings before merging" -ForegroundColor Gray
              }
          } else {
              Write-Host "`n‚úÖ PSScriptAnalyzer found no issues!" -ForegroundColor Green
          }

  module-import-compliance:
    name: Module Import Compliance
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check module import compliance
        shell: pwsh
        run: |
          Write-Host "`n=== Checking Module Import Compliance ===" -ForegroundColor Cyan

          $modulesPath = "scripts/modules"
          $violations = @()

          $moduleFiles = Get-ChildItem -Path $modulesPath -Filter "*.psm1" -ErrorAction SilentlyContinue

          if (-not $moduleFiles) {
              Write-Host "‚ö†Ô∏è  No module files found in $modulesPath" -ForegroundColor Yellow
              exit 0
          }

          foreach ($file in $moduleFiles) {
              $content = Get-Content -Path $file.FullName -Raw
              $lines = $content -split "`n"

              for ($i = 0; $i -lt $lines.Count; $i++) {
                  # Skip comment lines
                  if ($lines[$i] -match '^\s*#') { continue }

                  # Check for Import-Module statements (case-insensitive)
                  if ($lines[$i] -match '^\s*Import-Module\s') {
                      $violations += [PSCustomObject]@{
                          File = $file.Name
                          Line = $i + 1
                          Content = $lines[$i].Trim()
                      }
                  }
              }
          }

          if ($violations.Count -gt 0) {
              Write-Host "`n‚ùå Module Import Compliance Check FAILED" -ForegroundColor Red
              Write-Host "   Found $($violations.Count) violation(s):`n" -ForegroundColor Red

              foreach ($violation in $violations) {
                  Write-Host "   $($violation.File):$($violation.Line) - $($violation.Content)" -ForegroundColor Yellow
              }

              Write-Host "`n   Modules MUST NOT import other modules." -ForegroundColor Red
              Write-Host "   All imports should be managed by the orchestrator." -ForegroundColor Red
              Write-Host "   See .specify/memory/constitution.md - Module Import Rules`n" -ForegroundColor Cyan

              exit 1
          } else {
              Write-Host "‚úÖ Module import compliance check PASSED" -ForegroundColor Green
              Write-Host "   No nested imports found in $($moduleFiles.Count) module(s)" -ForegroundColor Green
          }

  test:
    name: Unit Tests with Coverage
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Pester
        shell: pwsh
        run: |
          Write-Host "Installing Pester..." -ForegroundColor Cyan
          Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser -MinimumVersion 5.0
          Write-Host "Installed version: $(Get-Module Pester -ListAvailable | Select-Object -ExpandProperty Version -First 1)" -ForegroundColor Green

      - name: Run unit tests
        shell: pwsh
        run: |
          ./tests/test-runner.ps1 -Unit

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/TestResults/
          retention-days: 30

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: tests/coverage/
          retention-days: 30

  summary:
    name: Quality Summary
    needs: [lint, module-import-compliance, test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check overall status
        run: |
          echo "### Quality Checks Summary"
          echo "- **PSScriptAnalyzer**: ${{ needs.lint.result }}"
          echo "- **Module Import Compliance**: ${{ needs.module-import-compliance.result }}"
          echo "- **Unit Tests**: ${{ needs.test.result }}"

          if [[ "${{ needs.lint.result }}" == "failure" ]] || \
             [[ "${{ needs.module-import-compliance.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo ""
            echo "‚ùå Quality checks failed"
            exit 1
          else
            echo ""
            echo "‚úÖ All quality checks passed"
          fi
