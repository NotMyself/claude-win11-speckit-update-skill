name: Claude Code Review (Access Controlled)

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "scripts/**/*.ps1"
    #   - "scripts/**/*.psm1"

jobs:
  # Step 1: Check if PR author is authorized for automated reviews
  authorize:
    name: Check Authorization
    runs-on: ubuntu-latest
    outputs:
      authorized: ${{ steps.check.outputs.authorized }}
      actor: ${{ github.actor }}
      association: ${{ steps.check.outputs.association }}
      reason: ${{ steps.check.outputs.reason }}
    steps:
      - name: Checkout repository (for config file)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check user authorization
        id: check
        shell: bash
        env:
          ACTOR: ${{ github.actor }}
          AUTHOR_ASSOCIATION: ${{ github.event.pull_request.author_association }}
          REPO_OWNER: ${{ github.repository_owner }}
        run: |
          echo "🔐 Checking authorization for automated review of PR by @$ACTOR..."
          echo "Author Association: $AUTHOR_ASSOCIATION"

          # Load config file
          CONFIG_FILE=".github/claude-authorized-users.yml"

          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Config file not found: $CONFIG_FILE"
            echo "authorized=false" >> $GITHUB_OUTPUT
            echo "reason=Configuration file missing" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check emergency circuit breaker
          EMERGENCY_DISABLE=$(grep -A 2 "^emergency:" "$CONFIG_FILE" | grep "disable_all:" | awk '{print $2}')
          if [ "$EMERGENCY_DISABLE" == "true" ]; then
            echo "🚨 Emergency circuit breaker enabled - all automated reviews disabled"
            echo "authorized=false" >> $GITHUB_OUTPUT
            echo "reason=Emergency circuit breaker enabled" >> $GITHUB_OUTPUT
            exit 0
          fi

          # For automated PR reviews, we use a more permissive policy
          # Allow: OWNER, COLLABORATOR, MEMBER by default
          # Block: FIRST_TIME_CONTRIBUTOR, NONE, CONTRIBUTOR (unless in allowlist)

          case "$AUTHOR_ASSOCIATION" in
            OWNER)
              echo "✅ PR author is repository owner - AUTHORIZED"
              echo "authorized=true" >> $GITHUB_OUTPUT
              echo "association=OWNER" >> $GITHUB_OUTPUT
              echo "reason=Repository owner" >> $GITHUB_OUTPUT
              exit 0
              ;;
            COLLABORATOR)
              echo "✅ PR author is collaborator - AUTHORIZED"
              echo "authorized=true" >> $GITHUB_OUTPUT
              echo "association=COLLABORATOR" >> $GITHUB_OUTPUT
              echo "reason=Collaborator with write access" >> $GITHUB_OUTPUT
              exit 0
              ;;
            MEMBER)
              echo "✅ PR author is org member - AUTHORIZED"
              echo "authorized=true" >> $GITHUB_OUTPUT
              echo "association=MEMBER" >> $GITHUB_OUTPUT
              echo "reason=Organization member" >> $GITHUB_OUTPUT
              exit 0
              ;;
          esac

          # Check authorized_users list in config file
          if grep -A 100 "^authorized_users:" "$CONFIG_FILE" | grep -E "^\s+-\s+$ACTOR\s*$" > /dev/null; then
            echo "✅ PR author found in authorized_users list - AUTHORIZED"
            echo "authorized=true" >> $GITHUB_OUTPUT
            echo "association=ALLOWLIST" >> $GITHUB_OUTPUT
            echo "reason=Explicitly authorized in config" >> $GITHUB_OUTPUT
            exit 0
          fi

          # User is NOT authorized - no automated review
          echo "🚫 PR author @$ACTOR is NOT authorized for automated reviews"
          echo "   Association: $AUTHOR_ASSOCIATION"
          echo "   Reason: Not in authorized users list and not a collaborator/owner/member"
          echo "   Note: Maintainers can still manually invoke @claude in PR comments"
          echo "authorized=false" >> $GITHUB_OUTPUT
          echo "association=$AUTHOR_ASSOCIATION" >> $GITHUB_OUTPUT
          echo "reason=Not authorized" >> $GITHUB_OUTPUT

      - name: Log authorization result
        if: always()
        run: |
          echo "📋 Authorization Summary"
          echo "   Actor: ${{ github.actor }}"
          echo "   Authorized: ${{ steps.check.outputs.authorized }}"
          echo "   Association: ${{ steps.check.outputs.association }}"
          echo "   Reason: ${{ steps.check.outputs.reason }}"

  # Step 2: Run automated Claude Code review (only if authorized)
  claude-review:
    name: Automated Code Review
    needs: authorize
    # Only run if PR author is authorized
    if: needs.authorize.outputs.authorized == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Log authorized review
        run: |
          echo "✅ Running automated Claude Code review for authorized PR by: ${{ needs.authorize.outputs.actor }}"
          echo "   Association: ${{ needs.authorize.outputs.association }}"
          echo "   Reason: ${{ needs.authorize.outputs.reason }}"

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            Please review this pull request and provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage

            Use the repository's CLAUDE.md for guidance on style and conventions. Be constructive and helpful in your feedback.

            Use `gh pr comment` with your Bash tool to leave your review as a comment on the PR.

          # See https://github.com/anthropics/claude-code-action/blob/main/docs/usage.md
          # or https://docs.claude.com/en/docs/claude-code/cli-reference for available options
          claude_args: '--allowed-tools "Bash(gh issue view:*),Bash(gh search:*),Bash(gh issue list:*),Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr list:*)"'
