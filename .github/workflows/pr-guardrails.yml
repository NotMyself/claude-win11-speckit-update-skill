name: PR Guardrails

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
    branches: [ main, develop ]

jobs:
  check-pr-size:
    name: Check PR Size
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate PR size
        id: size
        run: |
          echo "### PR Size Analysis" >> $GITHUB_STEP_SUMMARY

          # Get base and head commits
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          # Calculate changes
          ADDED=$(git diff --numstat $BASE_SHA...$HEAD_SHA | awk '{sum+=$1} END {print sum+0}')
          REMOVED=$(git diff --numstat $BASE_SHA...$HEAD_SHA | awk '{sum+=$2} END {print sum+0}')
          TOTAL=$((ADDED + REMOVED))
          FILES=$(git diff --numstat $BASE_SHA...$HEAD_SHA | wc -l)

          echo "added=$ADDED" >> $GITHUB_OUTPUT
          echo "removed=$REMOVED" >> $GITHUB_OUTPUT
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "files=$FILES" >> $GITHUB_OUTPUT

          echo "- **Lines Added**: $ADDED" >> $GITHUB_STEP_SUMMARY
          echo "- **Lines Removed**: $REMOVED" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Changes**: $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Changed**: $FILES" >> $GITHUB_STEP_SUMMARY

          # Determine size category
          if [ $TOTAL -lt 200 ]; then
            SIZE_LABEL="XS"
            SIZE_COLOR="green"
            SIZE_ICON="‚úÖ"
          elif [ $TOTAL -lt 500 ]; then
            SIZE_LABEL="S"
            SIZE_COLOR="green"
            SIZE_ICON="‚úÖ"
          elif [ $TOTAL -lt 1000 ]; then
            SIZE_LABEL="M"
            SIZE_COLOR="yellow"
            SIZE_ICON="‚ö†Ô∏è"
          elif [ $TOTAL -lt 2000 ]; then
            SIZE_LABEL="L"
            SIZE_COLOR="orange"
            SIZE_ICON="‚ö†Ô∏è"
          else
            SIZE_LABEL="XL"
            SIZE_COLOR="red"
            SIZE_ICON="üö´"
          fi

          echo "size_label=$SIZE_LABEL" >> $GITHUB_OUTPUT
          echo "size_color=$SIZE_COLOR" >> $GITHUB_OUTPUT

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "$SIZE_ICON **Size**: $SIZE_LABEL ($TOTAL lines)" >> $GITHUB_STEP_SUMMARY

      - name: Evaluate PR size
        env:
          TOTAL: ${{ steps.size.outputs.total }}
          SIZE_LABEL: ${{ steps.size.outputs.size_label }}
        run: |
          echo "PR Size: $SIZE_LABEL ($TOTAL lines)"

          if [ $TOTAL -lt 500 ]; then
            echo "‚úÖ PR size is acceptable"
          elif [ $TOTAL -lt 1000 ]; then
            echo "‚ö†Ô∏è  PR is large. Consider breaking into smaller PRs for easier review."
          elif [ $TOTAL -lt 2000 ]; then
            echo "üö´ PR is very large. Strongly recommend splitting into smaller PRs."
            echo "   Large PRs are harder to review and more likely to introduce bugs."
          else
            echo "‚ùå PR is extremely large (>2000 lines)!"
            echo "   This PR should be split into multiple smaller PRs."
            echo "   If this is unavoidable (e.g., generated code, data files), add justification in PR description."
            exit 1
          fi

  check-pr-description:
    name: Check PR Description
    runs-on: ubuntu-latest
    steps:
      - name: Check description completeness
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          echo "### PR Description Check" >> $GITHUB_STEP_SUMMARY

          # Check if description exists and is not empty
          if [ -z "$PR_BODY" ] || [ "$PR_BODY" == "null" ]; then
            echo "‚ùå PR description is empty" >> $GITHUB_STEP_SUMMARY
            echo ""
            echo "‚ùå PR description is required!"
            echo "   Please provide:"
            echo "   - What changes were made"
            echo "   - Why these changes are needed"
            echo "   - How you tested the changes"
            exit 1
          fi

          # Check minimum length (at least 50 characters)
          LENGTH=${#PR_BODY}
          if [ $LENGTH -lt 50 ]; then
            echo "‚ö†Ô∏è  PR description is very short ($LENGTH chars)" >> $GITHUB_STEP_SUMMARY
            echo ""
            echo "‚ö†Ô∏è  PR description is very short ($LENGTH characters)"
            echo "   Consider adding more details about:"
            echo "   - What changes were made"
            echo "   - Why these changes are needed"
            echo "   - How you tested the changes"
            # Don't fail on short descriptions, just warn
          fi

          # Check for testing section
          if echo "$PR_BODY" | grep -qi "test"; then
            echo "‚úÖ Testing information found" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è  No testing information found" >> $GITHUB_STEP_SUMMARY
            echo ""
            echo "‚ö†Ô∏è  Consider adding information about how you tested these changes"
          fi

          # Check for checklist completion
          TOTAL_BOXES=$(echo "$PR_BODY" | grep -c "\[.\]" || true)
          CHECKED_BOXES=$(echo "$PR_BODY" | grep -c "\[x\]" || true)

          if [ $TOTAL_BOXES -gt 0 ]; then
            echo "- **Checklist**: $CHECKED_BOXES/$TOTAL_BOXES completed" >> $GITHUB_STEP_SUMMARY

            if [ $CHECKED_BOXES -eq 0 ]; then
              echo ""
              echo "‚ö†Ô∏è  PR checklist is not completed"
              echo "   Please review and check off completed items"
            elif [ $CHECKED_BOXES -lt $TOTAL_BOXES ]; then
              echo ""
              echo "‚ÑπÔ∏è  PR checklist: $CHECKED_BOXES/$TOTAL_BOXES items completed"
            else
              echo "‚úÖ PR checklist is complete"
            fi
          fi

  check-changelog:
    name: Check CHANGELOG.md Updated
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if CHANGELOG.md was updated
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          echo "### CHANGELOG.md Check" >> $GITHUB_STEP_SUMMARY

          # Get base and head commits
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          # Check if CHANGELOG.md was modified
          CHANGELOG_CHANGED=$(git diff --name-only $BASE_SHA...$HEAD_SHA | grep -c "CHANGELOG.md" || true)

          # Check if this is a docs-only PR
          CHANGED_FILES=$(git diff --name-only $BASE_SHA...$HEAD_SHA)
          DOCS_ONLY=true
          while IFS= read -r file; do
            if [[ ! "$file" =~ ^(docs/|README.md|CONTRIBUTING.md|\.github/.*\.md|.*\.md) ]]; then
              DOCS_ONLY=false
              break
            fi
          done <<< "$CHANGED_FILES"

          # Check if this is a test-only PR
          TEST_ONLY=true
          while IFS= read -r file; do
            if [[ ! "$file" =~ ^(tests/) ]]; then
              TEST_ONLY=false
              break
            fi
          done <<< "$CHANGED_FILES"

          # Check if PR title indicates WIP, chore, or test
          if [[ "$PR_TITLE" =~ ^(WIP:|chore:|test:|docs:) ]]; then
            echo "‚ÑπÔ∏è  CHANGELOG.md update not required (WIP/chore/test/docs PR)" >> $GITHUB_STEP_SUMMARY
            echo "‚ÑπÔ∏è  CHANGELOG.md update not required for this type of PR"
            exit 0
          fi

          # Skip check for docs-only or test-only PRs
          if [ "$DOCS_ONLY" == "true" ] || [ "$TEST_ONLY" == "true" ]; then
            echo "‚ÑπÔ∏è  CHANGELOG.md update not required (docs/test-only PR)" >> $GITHUB_STEP_SUMMARY
            echo "‚ÑπÔ∏è  CHANGELOG.md update not required for docs/test-only PRs"
            exit 0
          fi

          # Require CHANGELOG.md update for feature/fix PRs
          if [ $CHANGELOG_CHANGED -eq 0 ]; then
            echo "‚ö†Ô∏è  CHANGELOG.md was not updated" >> $GITHUB_STEP_SUMMARY
            echo ""
            echo "‚ö†Ô∏è  CHANGELOG.md should be updated for this PR"
            echo "   Please add an entry under the [Unreleased] section"
            echo "   Skipped for: docs-only, test-only, WIP, chore PRs"
            # Don't fail - just warn
          else
            echo "‚úÖ CHANGELOG.md was updated" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ CHANGELOG.md was updated"
          fi

  check-related-issue:
    name: Check Related Issue Linked
    runs-on: ubuntu-latest
    steps:
      - name: Check for issue reference
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          echo "### Related Issue Check" >> $GITHUB_STEP_SUMMARY

          # Check for issue references in body or title
          # Patterns: Fixes #123, Closes #123, Resolves #123, Relates to #123, #123
          if echo "$PR_BODY $PR_TITLE" | grep -Eqi "(fixes|closes|resolves|relates to|#)[[:space:]]*#[0-9]+"; then
            echo "‚úÖ Related issue referenced" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Related issue referenced in PR"
          else
            echo "‚ö†Ô∏è  No related issue referenced" >> $GITHUB_STEP_SUMMARY
            echo ""
            echo "‚ö†Ô∏è  No related issue found"
            echo "   Consider linking to a related issue using:"
            echo "   - 'Fixes #123' (closes issue on merge)"
            echo "   - 'Relates to #123' (references issue)"
            # Don't fail - just inform
          fi

  summary:
    name: PR Guardrails Summary
    needs: [check-pr-size, check-pr-description, check-changelog, check-related-issue]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Overall status
        run: |
          echo "### PR Guardrails Summary"
          echo "- **PR Size**: ${{ needs.check-pr-size.result }}"
          echo "- **PR Description**: ${{ needs.check-pr-description.result }}"
          echo "- **CHANGELOG**: ${{ needs.check-changelog.result }}"
          echo "- **Related Issue**: ${{ needs.check-related-issue.result }}"

          # Only fail if critical checks fail
          if [[ "${{ needs.check-pr-size.result }}" == "failure" ]] || \
             [[ "${{ needs.check-pr-description.result }}" == "failure" ]]; then
            echo ""
            echo "‚ùå Critical PR guardrails failed"
            exit 1
          else
            echo ""
            echo "‚úÖ PR guardrails passed (warnings may exist)"
          fi
